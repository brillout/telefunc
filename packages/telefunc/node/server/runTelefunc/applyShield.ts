export { applyShield }

import { shieldApply, shieldIsMissing, shieldIsAutoGenerated, detectExtraProperties } from '../shield.js'
import { assertWarning, isProduction } from '../utils.js'
import type { Telefunction } from '../types.js'
import type { ConfigResolved } from '../serverConfig.js'

function applyShield(runContext: {
  telefunction: Telefunction
  telefunctionName: string
  telefuncFilePath: string
  telefunctionArgs: unknown[]
  serverConfig: Pick<ConfigResolved, 'log'>
}): { isValidRequest: boolean } {
  const { telefunction, telefunctionArgs, telefunctionName, telefuncFilePath } = runContext

  const hasShield = !shieldIsMissing(telefunction)
  if (isProduction()) {
    assertWarning(
      hasShield || telefunctionArgs.length === 0,
      `The telefunction ${telefunctionName}() (${telefuncFilePath}) accepts arguments yet is missing shield(), see https://telefunc.com/shield`,
      { onlyOnce: true },
    )
  }
  if (!hasShield) {
    return { isValidRequest: true }
  }

  const applyResult = shieldApply(telefunction, telefunctionArgs)
  if (applyResult === true) {
    // Check for superfluous properties and warn if enabled
    if (shieldIsAutoGenerated(telefunction)) {
      const logSuperfluousProperties = runContext.serverConfig.log.shieldSuperfluousProperties
      if ((logSuperfluousProperties.dev && !isProduction()) || (logSuperfluousProperties.prod && isProduction())) {
        const telefunctionShield = (telefunction as any).__telefunc_shield
        if (telefunctionShield) {
          const extraProperties = detectExtraProperties(telefunctionShield, telefunctionArgs)
          if (extraProperties.length > 0) {
            const warnMsg = [
              `Shield Superfluous Properties Warning: the telefunction ${telefunctionName}() (${telefuncFilePath}) received extra properties that are not defined in the TypeScript interface.`,
              `Extra properties: ${extraProperties.join(', ')}.`,
              `This is allowed (like TypeScript), but you may want to review your function signature.`,
            ].join(' ')
            assertWarning(false, warnMsg, { onlyOnce: `${telefunctionName}-${telefuncFilePath}` })
          }
        }
      }
    }
    return { isValidRequest: true }
  }

  let logShieldErrors = runContext.serverConfig.log.shieldErrors
  if ((logShieldErrors.dev && !isProduction()) || (logShieldErrors.prod && isProduction())) {
    const errMsg = [
      `Shield Validation Error: the arguments passed to the telefunction ${telefunctionName}() (${telefuncFilePath}) have the wrong type.`,
      `Arguments: \`${JSON.stringify(telefunctionArgs)}\`.`,
      `Wrong type: ${applyResult}`,
    ].join(' ')
    console.error(errMsg)
  }

  return { isValidRequest: false }
}
