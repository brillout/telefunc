import { shield } from '../shield.js'
import { applyShield } from './applyShield.js'
import { expect, describe, it, vi } from 'vitest'

describe('applyShield', () => {
  const t = shield.type

  it('should warn about superfluous properties in auto-generated shields when enabled', () => {
    const consoleSpy = vi.spyOn(console, 'warn').mockImplementation(() => {})

    try {
      const telefunction = (...[]: any) => {}
      shield(telefunction, [{ name: t.string, age: t.number }], { __autoGenerated: true })

      const runContext = {
        telefunction,
        telefunctionName: 'testFunction',
        telefuncFilePath: '/test/test.telefunc.ts',
        telefunctionArgs: [{ name: 'John', age: 30, city: 'NYC', country: 'USA' }],
        serverConfig: {
          log: {
            shieldErrors: { dev: true, prod: true },
            shieldSuperfluousProperties: { dev: true, prod: false },
          },
        },
      }

      const result = applyShield(runContext)

      expect(result.isValidRequest).toBe(true)
      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Shield Superfluous Properties Warning'))
      expect(consoleSpy).toHaveBeenCalledWith(
        expect.stringContaining(
          'Extra properties: [root] > [tuple: element 0] > [object: key `city`], [root] > [tuple: element 0] > [object: key `country`]',
        ),
      )
    } finally {
      consoleSpy.mockRestore()
    }
  })

  it('should not warn about superfluous properties when disabled', () => {
    const consoleSpy = vi.spyOn(console, 'warn').mockImplementation(() => {})

    try {
      const telefunction = (...[]: any) => {}
      shield(telefunction, [{ name: t.string, age: t.number }], { __autoGenerated: true })

      const runContext = {
        telefunction,
        telefunctionName: 'testFunction',
        telefuncFilePath: '/test/test.telefunc.ts',
        telefunctionArgs: [{ name: 'John', age: 30, city: 'NYC' }],
        serverConfig: {
          log: {
            shieldErrors: { dev: true, prod: true },
            shieldSuperfluousProperties: { dev: false, prod: false },
          },
        },
      }

      const result = applyShield(runContext)

      expect(result.isValidRequest).toBe(true)
      expect(consoleSpy).not.toHaveBeenCalled()
    } finally {
      consoleSpy.mockRestore()
    }
  })

  it('should not warn about superfluous properties in manually defined shields', () => {
    const consoleSpy = vi.spyOn(console, 'warn').mockImplementation(() => {})

    try {
      const telefunction = (...[]: any) => {}
      shield(telefunction, [{ name: t.string, age: t.number }]) // Not auto-generated

      const runContext = {
        telefunction,
        telefunctionName: 'testFunction',
        telefuncFilePath: '/test/test.telefunc.ts',
        telefunctionArgs: [{ name: 'John', age: 30, city: 'NYC' }],
        serverConfig: {
          log: {
            shieldErrors: { dev: true, prod: true },
            shieldSuperfluousProperties: { dev: true, prod: true },
          },
        },
      }

      const result = applyShield(runContext)

      expect(result.isValidRequest).toBe(true)
      expect(consoleSpy).not.toHaveBeenCalled()
    } finally {
      consoleSpy.mockRestore()
    }
  })

  it('should not warn when there are no extra properties', () => {
    const consoleSpy = vi.spyOn(console, 'warn').mockImplementation(() => {})

    try {
      const telefunction = (...[]: any) => {}
      shield(telefunction, [{ name: t.string, age: t.number }], { __autoGenerated: true })

      const runContext = {
        telefunction,
        telefunctionName: 'testFunction',
        telefuncFilePath: '/test/test.telefunc.ts',
        telefunctionArgs: [{ name: 'John', age: 30 }], // Exact match
        serverConfig: {
          log: {
            shieldErrors: { dev: true, prod: true },
            shieldSuperfluousProperties: { dev: true, prod: true },
          },
        },
      }

      const result = applyShield(runContext)

      expect(result.isValidRequest).toBe(true)
      expect(consoleSpy).not.toHaveBeenCalled()
    } finally {
      consoleSpy.mockRestore()
    }
  })

  it('should still reject invalid requests', () => {
    const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {})

    try {
      const telefunction = (...[]: any) => {}
      shield(telefunction, [{ name: t.string, age: t.number }], { __autoGenerated: true })

      const runContext = {
        telefunction,
        telefunctionName: 'testFunction',
        telefuncFilePath: '/test/test.telefunc.ts',
        telefunctionArgs: [{ name: 'John', age: 'not a number' }], // Wrong type
        serverConfig: {
          log: {
            shieldErrors: { dev: true, prod: true },
            shieldSuperfluousProperties: { dev: true, prod: true },
          },
        },
      }

      const result = applyShield(runContext)

      expect(result.isValidRequest).toBe(false)
      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Shield Validation Error'))
    } finally {
      consoleSpy.mockRestore()
    }
  })
})
