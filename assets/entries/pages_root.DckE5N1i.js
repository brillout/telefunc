import{u as i,o as l,a as s}from"../chunks/chunk-DwVAO9jS.js";import{j as e}from"../chunks/chunk-DRRrHF0e.js";import{L as n}from"../chunks/chunk-B0JU7VPY.js";/* empty css                      */import{W as a}from"../chunks/chunk-B1EewX4o.js";/* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      */import{M as d}from"../chunks/chunk-D5U-1tSk.js";/* empty css                      *//* empty css                      *//* empty css                      */const c=[{pageSectionId:"monorepo",pageSectionLevel:2,pageSectionTitle:"Monorepo"},{pageSectionId:"see-also",pageSectionLevel:2,pageSectionTitle:"See also"}];function r(t){const o={code:"code",figure:"figure",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...i(),...t.components};return e.jsxs(e.Fragment,{children:[e.jsxs(o.p,{children:[e.jsx(o.strong,{children:"Environment"}),": server."]}),`
`,e.jsx(a,{children:"This is a beta feature."}),`
`,e.jsxs(o.p,{children:["If you use ",e.jsx(n,{href:"/telefuncFiles",children:e.jsx(o.code,{children:"config.telefuncFiles"})}),", then you also need to set ",e.jsx(o.code,{children:"config.root"}),"."]}),`
`,e.jsx(o.figure,{"data-rehype-pretty-code-figure":"",children:e.jsx(o.pre,{tabIndex:"0","data-language":"ts","data-theme":"github-light",children:e.jsxs(o.code,{"data-language":"ts","data-theme":"github-light",style:{display:"grid"},children:[e.jsx(o.span,{"data-line":"",children:e.jsx(o.span,{style:{color:"#6A737D"},children:"// Environment: server"})}),`
`,e.jsx(o.span,{"data-line":"",children:" "}),`
`,e.jsxs(o.span,{"data-line":"",children:[e.jsx(o.span,{style:{color:"#D73A49"},children:"import"}),e.jsx(o.span,{style:{color:"#24292E"},children:" { config } "}),e.jsx(o.span,{style:{color:"#D73A49"},children:"from"}),e.jsx(o.span,{style:{color:"#032F62"},children:" 'telefunc'"})]}),`
`,e.jsx(o.span,{"data-line":"",children:" "}),`
`,e.jsx(o.span,{"data-line":"",children:e.jsx(o.span,{style:{color:"#6A737D"},children:"// Your project's root directory"})}),`
`,e.jsxs(o.span,{"data-line":"",children:[e.jsx(o.span,{style:{color:"#24292E"},children:"config.root "}),e.jsx(o.span,{style:{color:"#D73A49"},children:"="}),e.jsx(o.span,{style:{color:"#24292E"},children:" __dirname"})]})]})})}),`
`,e.jsxs(o.p,{children:["The ",e.jsx(o.code,{children:"config.root"})," setting is only needed if you use ",e.jsx(n,{href:"/telefuncFiles",children:e.jsx(o.code,{children:"config.telefuncFiles"})}),"."]}),`
`,e.jsx(d,{}),`
`,e.jsx("h2",{id:"monorepo",children:"Monorepo"}),`
`,e.jsxs(o.p,{children:["If you have a monorepo structure, then set ",e.jsx(o.code,{children:"config.root"})," to the root directory of your client-side (i.e. the root of Vite/Vike/Next.js/Nuxt/...). Don't set ",e.jsx(o.code,{children:"config.root"})," to the monorepo root, nor to the root directory of your server. (The ",e.jsx(o.code,{children:"config.root"})," setting enables Telefunc to match your ",e.jsx(o.code,{children:".telefunc.js"})," files/imports between the server-side and the client-side.)"]}),`
`,e.jsx("h2",{id:"see-also",children:"See also"}),`
`,e.jsxs(o.ul,{children:[`
`,e.jsxs(o.li,{children:[`
`,e.jsx(n,{href:"/telefuncFiles"}),`
`]}),`
`,e.jsxs(o.li,{children:[`
`,e.jsx(n,{href:"/transformer"}),`
`]}),`
`]})]})}function p(t={}){const{wrapper:o}={...i(),...t.components};return o?e.jsx(o,{...t,children:e.jsx(r,{...t})}):r(t)}const h=Object.freeze(Object.defineProperty({__proto__:null,default:p,pageSectionsExport:c},Symbol.toStringTag,{value:"Module"})),E={serverOnlyHooks:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!1}},isClientRuntimeLoaded:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!0}},onBeforeRenderEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},dataEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},onRenderClient:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/renderer/onRenderClient",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:s}},onCreatePageContext:{type:"cumulative",definedAtData:[{filePathToShowToUser:"@brillout/docpress/renderer/onCreatePageContext",fileExportPathToShowToUser:[]}],valueSerialized:[{type:"pointer-import",value:l}]},Page:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/root/+Page.mdx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:h}},hydrationCanBeAborted:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/config",fileExportPathToShowToUser:["default","hydrationCanBeAborted"]},valueSerialized:{type:"js-serialized",value:!0}}};export{E as configValuesSerialized};
